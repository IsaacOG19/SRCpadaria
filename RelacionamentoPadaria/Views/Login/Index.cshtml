@model UsuarioModel

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acessar Painel Administrador</title>
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />
</head>
<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6 col-md-9">
                <div class="card o-hidden border-0 shadow-lg my-5">
                    <div class="card-body p-0">
                        <div class="row col-lg-12">
                            @*<div class="col-lg-6 d-none d-lg-block bg-login-image"></div>*@
                            <div class="col-lg-12">
                                <div class="p-5">
                                    <div class="text-center">
                                        <h1 class="h4 text-gray-900 mb-4">Acessar Painel Administrador</h1>
                                    </div>
                                    <form class="form-signin user" method="post">
                                        @Html.AntiForgeryToken()
                                        <div class="form-group">
                                            @Html.EditorFor(model => model.Usuario, new { htmlAttributes = new{ @class="form-control", @placeholder="Informe seu endereço de e-mail..." }})
                                            @Html.ValidationMessageFor(model => model.Usuario, String.Empty, new { @class = "text-danger" })
                                        </div>
                                        <div class="form-group">
                                            @Html.EditorFor(model => model.Senha, new { htmlAttributes = new{ @class="form-control", @placeholder="Senha", @type="password" }})
                                            @Html.ValidationMessageFor(model => model.Senha, String.Empty, new { @class = "text-danger" })
                                        </div>
                                        <div class="form-group">
                                            <label>
                                                @Html.CheckBoxFor(model => model.FicarLogado)
                                                Ficar logado
                                            </label>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Entrar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.33/dist/sweetalert2.all.min.js"></script>

    <script>
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        });

        function AlertSuccess(message) {
            Toast.fire({
                icon: 'success',
                title: message
            });
        }

        function AlertError(message) {
            Toast.fire({
                icon: 'error',
                title: message
            });
        }

        function AlertWarning(message) {
            Toast.fire({
                icon: 'warning',
                title: message
            });
        }
    </script>

    @if (TempData["Status"] != null && TempData["Mensagem"] != "")
    {
        if ((StatusEnum)TempData["Status"] == StatusEnum.Sucesso)
        {
            <script>
                AlertSuccess("@TempData["Mensagem"]")
                @TempData.Remove("Mensagem");
            </script>
        }
        else if ((StatusEnum)TempData["Status"] == StatusEnum.Alerta)
        {
            <script>
                AlertWarning("@TempData["Mensagem"]")
                @TempData.Remove("Mensagem");
            </script>
        }
        else
        {
            <script>
                AlertError("@TempData["Mensagem"]")
                @TempData.Remove("Mensagem");
            </script>
        }
    }
</body>
</html>